# Parking Lot Reservation Backend

## Overview

The Parking Lot Reservation Backend is a RESTful service built using **Java 17+** and **Spring Boot 3+**.
It allows administrators to manage parking floors and slots, and enables customers to reserve slots for specific time ranges without conflicts. The system ensures no overlapping reservations and calculates parking fees based on vehicle type and duration.

---

## Features

* **Floor Management:** Create parking floors (`POST /floors`)
* **Slot Management:** Create parking slots for each floor (`POST /slots`)
* **Reservation:** Reserve a parking slot (`POST /reserve`)

  * Checks availability to prevent overlapping bookings
  * Calculates cost based on vehicle type and duration
* **Availability:** List available slots for a given time range (`GET /availability`)
* **Reservation Details:** Fetch reservation by ID (`GET /reservations/{id}`)
* **Cancellation:** Cancel a reservation (`DELETE /reservations/{id}`)

---

## Business Rules

* Reservation start time must be before end time
* Reservation duration cannot exceed 24 hours
* Vehicle number format: `XX00XX0000` (e.g., KA05MH1234)
* Partial hours are rounded up to the next full hour

---

## Tech Stack

* Java 17+
* Spring Boot 3+
* H2 Database (in-memory)
* Maven
* Bean Validation (`@Valid`)
* VS Code

---

## Setup and Run Instructions

### Prerequisites

* Install Java 17+ and Maven
* Use VS Code or any Java IDE

### Build and Run

```bash
git clone <repository-url>
cd parkinglot-reservation
./mvnw clean package -DskipTests
./mvnw spring-boot:run
```

Backend runs on: `http://localhost:8080/`

### Database

H2 in-memory database; no installation required.
Access H2 console at: `http://localhost:8080/h2-console`

* JDBC URL: `jdbc:h2:mem:parkinglotdb`
* Username: `sar`
* Password: (leave blank)

### Test API

Use Postman to test all endpoints.

---

## Deployment

The backend is deployed on **Render**.
Supports standard Maven build or Docker deployment:

```bash
java -jar target/parkinglot-reservation-0.0.1-SNAPSHOT.jar
```

###  Deployment Verification

* Visiting the root URL (`/`) shows the Spring Boot **White Label Error Page**.
* This is expected since no endpoint is mapped to `/`.

To verify that the backend is running, use this **GET endpoint**:

**GET Slots Endpoint:**
[https://parking-lot-reservation-g4sr.onrender.com/slots](https://parking-lot-reservation-g4sr.onrender.com/slots)

> If no slots exist yet, it will return an empty list (`[]`), confirming that the backend is working.

> **Note:** POST endpoints like `/floors` and `/reserve` cannot be tested via browser directly. Use Postman or any REST client to send POST requests with required JSON payloads.

---

## Notes About Homepage and Swagger UI

* Currently, there is no homepage for the live deployment.
* Swagger UI is available locally for API testing but is **not pushed to the deployed version**.
* Future updates will include a proper homepage and live Swagger UI.