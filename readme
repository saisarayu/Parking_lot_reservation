Parking Lot Reservation Backend
1. Objective

The Parking Lot Reservation backend manages a multi-floor parking facility, allowing administrators to manage floors and slots, and customers to reserve slots for specific time periods. The system ensures no double bookings and calculates parking fees based on vehicle type and duration.

Built with Java 21, Spring Boot 3, and Maven, this backend provides RESTful APIs for easy frontend integration and efficient parking management.

2. Features

Parking Floor Management: Create and manage multiple parking floors.

Slot Management: Add parking slots for each floor.

Reservation System: Reserve slots for specific time ranges without conflicts.

Availability Check: List available slots for a given period.

Cost Calculation: Calculates fees based on vehicle type and duration (rounds up partial hours).

Validation: Ensures vehicle numbers follow XX00XX0000 format.

3. API Endpoints
Method	Endpoint	Description
POST	/floors	Create a parking floor
POST	/slots	Create parking slots for a floor
POST	/reserve	Reserve a slot for a time range
GET	/availability	List available slots for a specified time
GET	/reservations/{id}	Fetch reservation details
DELETE	/reservations/{id}	Cancel a reservation

Additional endpoints can be added as needed for administration and reporting.

4. Business Rules

Reservation start time must be before end time.

Maximum reservation duration: 24 hours.

Vehicle number format: XX00XX0000 (e.g., KA05MH1234).

Partial hours are charged as full hours.

System supports new vehicle types and rate adjustments.

Vehicle Rates
Vehicle Type	Rate Per Hour
2-Wheeler	₹20
4-Wheeler	₹30
5. Technology Stack

Backend: Java 21, Spring Boot 3+

Database: H2 (in-memory)

Build Tool: Maven

Validation: Bean Validation (@Valid)

Testing & API Exploration: Postman, Swagger

Deployment: Render

6. Setup Instructions

Clone the repository

git clone <repository-url>
cd parkinglot-reservation


Database

H2 in-memory database is used; no installation required.

Access H2 console at: http://localhost:5050/h2-console

JDBC URL: jdbc:h2:mem:parkingdb

Username: sa

Password: (leave blank)

Build & Run

./mvnw clean package -DskipTests
./mvnw spring-boot:run


Backend runs on: http://localhost:8080/

Test API

Use Postman or Swagger UI to interact with APIs.

7. Deployment

Application is deployed on Render.

Supports Docker deployment or standard Maven build:

java -jar target/parkinglot-reservation-0.0.1-SNAPSHOT.jar

8. Testing

Unit tests validate floor creation, slot reservation, and availability logic.

Ensures 90–100% code coverage.

API endpoints tested using Postman and Swagger.

9. Optional Enhancements

Optimistic Locking: Prevents concurrent booking conflicts.

Pagination & Sorting: Efficient availability retrieval.

Swagger/OpenAPI Integration: For interactive API documentation.